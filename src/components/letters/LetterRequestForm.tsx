
import React, { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { FileText, Send } from 'lucide-react';

export const LetterRequestForm = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    student_id: '',
    letter_type: '',
    purpose: '',
    additional_notes: ''
  });

  const letterTypes = [
    { value: 'surat_keterangan_siswa', label: 'Surat Keterangan Siswa' },
    { value: 'surat_keterangan_berkelakuan_baik', label: 'Surat Keterangan Berkelakuan Baik' },
    { value: 'surat_rekomendasi', label: 'Surat Rekomendasi' },
    { value: 'surat_izin_penelitian', label: 'Surat Izin Penelitian' },
    { value: 'surat_keterangan_lulus', label: 'Surat Keterangan Lulus' },
    { value: 'transkrip_nilai', label: 'Transkrip Nilai' },
    { value: 'lainnya', label: 'Lainnya' }
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user?.id) return;

    setLoading(true);
    try {
      // The request_number will be auto-generated by the database trigger
      const { error } = await supabase
        .from('letter_requests')
        .insert({
          student_id: formData.student_id,
          letter_type: formData.letter_type,
          purpose: formData.purpose,
          additional_notes: formData.additional_notes,
          request_number: '' // This will be overridden by the trigger
        });

      if (error) throw error;

      toast({
        title: "Berhasil",
        description: "Permohonan surat berhasil diajukan"
      });

      setFormData({
        student_id: '',
        letter_type: '',
        purpose: '',
        additional_notes: ''
      });
    } catch (error) {
      console.error('Error submitting letter request:', error);
      toast({
        title: "Error",
        description: "Gagal mengajukan permohonan surat",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="w-5 h-5" />
          Permohonan Surat Keterangan
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="student_id">Siswa</Label>
            <Input
              id="student_id"
              placeholder="ID Siswa atau nama siswa"
              value={formData.student_id}
              onChange={(e) => setFormData(prev => ({ ...prev, student_id: e.target.value }))}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="letter_type">Jenis Surat</Label>
            <Select value={formData.letter_type} onValueChange={(value) => setFormData(prev => ({ ...prev, letter_type: value }))}>
              <SelectTrigger>
                <SelectValue placeholder="Pilih jenis surat..." />
              </SelectTrigger>
              <SelectContent>
                {letterTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="purpose">Tujuan Penggunaan</Label>
            <Input
              id="purpose"
              placeholder="Untuk keperluan apa surat ini akan digunakan"
              value={formData.purpose}
              onChange={(e) => setFormData(prev => ({ ...prev, purpose: e.target.value }))}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="additional_notes">Catatan Tambahan</Label>
            <Textarea
              id="additional_notes"
              placeholder="Informasi tambahan yang diperlukan..."
              value={formData.additional_notes}
              onChange={(e) => setFormData(prev => ({ ...prev, additional_notes: e.target.value }))}
              className="min-h-[100px]"
            />
          </div>

          <Button type="submit" disabled={loading} className="w-full">
            <Send className="w-4 h-4 mr-2" />
            {loading ? 'Mengajukan...' : 'Ajukan Permohonan'}
          </Button>
        </form>

        <div className="mt-4 p-3 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-800">
            <strong>Catatan:</strong> Permohonan surat akan diproses dalam 3-5 hari kerja. Anda akan mendapat notifikasi ketika surat sudah siap diambil.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};
